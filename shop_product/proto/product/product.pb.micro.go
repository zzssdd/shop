// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Product service

func NewProductEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Product service

type ProductService interface {
	ProductList(ctx context.Context, in *ProductsRequest, opts ...client.CallOption) (*ProductsResponse, error)
	ProductAdd(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*MsgResponse, error)
	ProductDel(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*MsgResponse, error)
	ProductToEdit(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*ProductEditResponse, error)
	ProductDoEdit(ctx context.Context, in *EditRequest, opts ...client.CallOption) (*MsgResponse, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) ProductList(ctx context.Context, in *ProductsRequest, opts ...client.CallOption) (*ProductsResponse, error) {
	req := c.c.NewRequest(c.name, "Product.ProductList", in)
	out := new(ProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ProductAdd(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*MsgResponse, error) {
	req := c.c.NewRequest(c.name, "Product.ProductAdd", in)
	out := new(MsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ProductDel(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*MsgResponse, error) {
	req := c.c.NewRequest(c.name, "Product.ProductDel", in)
	out := new(MsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ProductToEdit(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*ProductEditResponse, error) {
	req := c.c.NewRequest(c.name, "Product.ProductToEdit", in)
	out := new(ProductEditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ProductDoEdit(ctx context.Context, in *EditRequest, opts ...client.CallOption) (*MsgResponse, error) {
	req := c.c.NewRequest(c.name, "Product.ProductDoEdit", in)
	out := new(MsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Product service

type ProductHandler interface {
	ProductList(context.Context, *ProductsRequest, *ProductsResponse) error
	ProductAdd(context.Context, *ProductRequest, *MsgResponse) error
	ProductDel(context.Context, *IdRequest, *MsgResponse) error
	ProductToEdit(context.Context, *IdRequest, *ProductEditResponse) error
	ProductDoEdit(context.Context, *EditRequest, *MsgResponse) error
}

func RegisterProductHandler(s server.Server, hdlr ProductHandler, opts ...server.HandlerOption) error {
	type product interface {
		ProductList(ctx context.Context, in *ProductsRequest, out *ProductsResponse) error
		ProductAdd(ctx context.Context, in *ProductRequest, out *MsgResponse) error
		ProductDel(ctx context.Context, in *IdRequest, out *MsgResponse) error
		ProductToEdit(ctx context.Context, in *IdRequest, out *ProductEditResponse) error
		ProductDoEdit(ctx context.Context, in *EditRequest, out *MsgResponse) error
	}
	type Product struct {
		product
	}
	h := &productHandler{hdlr}
	return s.Handle(s.NewHandler(&Product{h}, opts...))
}

type productHandler struct {
	ProductHandler
}

func (h *productHandler) ProductList(ctx context.Context, in *ProductsRequest, out *ProductsResponse) error {
	return h.ProductHandler.ProductList(ctx, in, out)
}

func (h *productHandler) ProductAdd(ctx context.Context, in *ProductRequest, out *MsgResponse) error {
	return h.ProductHandler.ProductAdd(ctx, in, out)
}

func (h *productHandler) ProductDel(ctx context.Context, in *IdRequest, out *MsgResponse) error {
	return h.ProductHandler.ProductDel(ctx, in, out)
}

func (h *productHandler) ProductToEdit(ctx context.Context, in *IdRequest, out *ProductEditResponse) error {
	return h.ProductHandler.ProductToEdit(ctx, in, out)
}

func (h *productHandler) ProductDoEdit(ctx context.Context, in *EditRequest, out *MsgResponse) error {
	return h.ProductHandler.ProductDoEdit(ctx, in, out)
}
