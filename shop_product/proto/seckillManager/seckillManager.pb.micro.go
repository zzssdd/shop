// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/seckillManager/seckillManager.proto

package seckillManager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Seckills service

func NewSeckillsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Seckills service

type SeckillsService interface {
	SeckillList(ctx context.Context, in *SeckillsRequest, opts ...client.CallOption) (*SeckillsResponse, error)
	SecKillAdd(ctx context.Context, in *Seckill, opts ...client.CallOption) (*MsgResponse, error)
	SeckillDel(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*MsgResponse, error)
	SeckillDoEdit(ctx context.Context, in *SeckillEdit, opts ...client.CallOption) (*MsgResponse, error)
	SeckillInfo(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*SeckillResponse, error)
}

type seckillsService struct {
	c    client.Client
	name string
}

func NewSeckillsService(name string, c client.Client) SeckillsService {
	return &seckillsService{
		c:    c,
		name: name,
	}
}

func (c *seckillsService) SeckillList(ctx context.Context, in *SeckillsRequest, opts ...client.CallOption) (*SeckillsResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SeckillList", in)
	out := new(SeckillsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SecKillAdd(ctx context.Context, in *Seckill, opts ...client.CallOption) (*MsgResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SecKillAdd", in)
	out := new(MsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SeckillDel(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*MsgResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SeckillDel", in)
	out := new(MsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SeckillDoEdit(ctx context.Context, in *SeckillEdit, opts ...client.CallOption) (*MsgResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SeckillDoEdit", in)
	out := new(MsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SeckillInfo(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*SeckillResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SeckillInfo", in)
	out := new(SeckillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Seckills service

type SeckillsHandler interface {
	SeckillList(context.Context, *SeckillsRequest, *SeckillsResponse) error
	SecKillAdd(context.Context, *Seckill, *MsgResponse) error
	SeckillDel(context.Context, *IdRequest, *MsgResponse) error
	SeckillDoEdit(context.Context, *SeckillEdit, *MsgResponse) error
	SeckillInfo(context.Context, *IdRequest, *SeckillResponse) error
}

func RegisterSeckillsHandler(s server.Server, hdlr SeckillsHandler, opts ...server.HandlerOption) error {
	type seckills interface {
		SeckillList(ctx context.Context, in *SeckillsRequest, out *SeckillsResponse) error
		SecKillAdd(ctx context.Context, in *Seckill, out *MsgResponse) error
		SeckillDel(ctx context.Context, in *IdRequest, out *MsgResponse) error
		SeckillDoEdit(ctx context.Context, in *SeckillEdit, out *MsgResponse) error
		SeckillInfo(ctx context.Context, in *IdRequest, out *SeckillResponse) error
	}
	type Seckills struct {
		seckills
	}
	h := &seckillsHandler{hdlr}
	return s.Handle(s.NewHandler(&Seckills{h}, opts...))
}

type seckillsHandler struct {
	SeckillsHandler
}

func (h *seckillsHandler) SeckillList(ctx context.Context, in *SeckillsRequest, out *SeckillsResponse) error {
	return h.SeckillsHandler.SeckillList(ctx, in, out)
}

func (h *seckillsHandler) SecKillAdd(ctx context.Context, in *Seckill, out *MsgResponse) error {
	return h.SeckillsHandler.SecKillAdd(ctx, in, out)
}

func (h *seckillsHandler) SeckillDel(ctx context.Context, in *IdRequest, out *MsgResponse) error {
	return h.SeckillsHandler.SeckillDel(ctx, in, out)
}

func (h *seckillsHandler) SeckillDoEdit(ctx context.Context, in *SeckillEdit, out *MsgResponse) error {
	return h.SeckillsHandler.SeckillDoEdit(ctx, in, out)
}

func (h *seckillsHandler) SeckillInfo(ctx context.Context, in *IdRequest, out *SeckillResponse) error {
	return h.SeckillsHandler.SeckillInfo(ctx, in, out)
}
