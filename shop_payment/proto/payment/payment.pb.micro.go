// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/payment/payment.proto

package payment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Payment service

func NewPaymentEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Payment service

type PaymentService interface {
	PaymentList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	PaymentAdd(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*Response, error)
	PaymentDel(ctx context.Context, in *DelRequest, opts ...client.CallOption) (*Response, error)
}

type paymentService struct {
	c    client.Client
	name string
}

func NewPaymentService(name string, c client.Client) PaymentService {
	return &paymentService{
		c:    c,
		name: name,
	}
}

func (c *paymentService) PaymentList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Payment.PaymentList", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentService) PaymentAdd(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Payment.PaymentAdd", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentService) PaymentDel(ctx context.Context, in *DelRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Payment.PaymentDel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Payment service

type PaymentHandler interface {
	PaymentList(context.Context, *ListRequest, *ListResponse) error
	PaymentAdd(context.Context, *AddRequest, *Response) error
	PaymentDel(context.Context, *DelRequest, *Response) error
}

func RegisterPaymentHandler(s server.Server, hdlr PaymentHandler, opts ...server.HandlerOption) error {
	type payment interface {
		PaymentList(ctx context.Context, in *ListRequest, out *ListResponse) error
		PaymentAdd(ctx context.Context, in *AddRequest, out *Response) error
		PaymentDel(ctx context.Context, in *DelRequest, out *Response) error
	}
	type Payment struct {
		payment
	}
	h := &paymentHandler{hdlr}
	return s.Handle(s.NewHandler(&Payment{h}, opts...))
}

type paymentHandler struct {
	PaymentHandler
}

func (h *paymentHandler) PaymentList(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.PaymentHandler.PaymentList(ctx, in, out)
}

func (h *paymentHandler) PaymentAdd(ctx context.Context, in *AddRequest, out *Response) error {
	return h.PaymentHandler.PaymentAdd(ctx, in, out)
}

func (h *paymentHandler) PaymentDel(ctx context.Context, in *DelRequest, out *Response) error {
	return h.PaymentHandler.PaymentDel(ctx, in, out)
}
